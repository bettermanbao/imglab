#!/bin/sh

set -e

cd target

OUTPUT_IMG=$DISTRO-$DESKTOP-$ARCH-$BRANCH-$DEVICE.img

if [ -f "$OUTPUT_IMG" ]; then rm -f "$OUTPUT_IMG" ; fi

#IMG_SIZE=$(( `du $DISTRO-$DESKTOP-$ARCH-$BRANCH-$DEVICE.tar | awk '{print $1}'` * 2 * 1200 ))

case "$ARCH" in
	arm* | aarch64 ) BOOT_SIZE=204800;;
	* )BOOT_SIZE=1024000;;
esac

IMG_SIZE=$(( (`du $DISTRO-$DESKTOP-$ARCH-$BRANCH-$DEVICE.tar | awk '{print $1}'` + ${BOOT_SIZE} + 1024000) * 1024 ))

gen_image() {
	fallocate -l $IMG_SIZE "$OUTPUT_IMG"
cat > fdisk.cmd <<-EOF
	o
	n
	p
	1
	
	+${BOOT_SIZE}
	t
	c
	a
	n
	p
	2
	
	
	w
EOF
fdisk "$OUTPUT_IMG" < fdisk.cmd
rm -f fdisk.cmd
}

do_format() {
	mkfs.vfat -n boot -v "$BOOT_DEV" > /dev/null
	mkfs.ext4 -L rootfs "$ROOT_DEV" > /dev/null
	mkdir -p mnt
	mount "$ROOT_DEV" mnt
	mkdir -p mnt/boot
	mount "$BOOT_DEV" mnt/boot
}

umounts() {
	umount mnt/boot
	umount mnt
	losetup -d "$ROOT_DEV"
	losetup -d "$BOOT_DEV"
}

gen_image

#take from raspbian pi-gen

PARTED_OUT=$(parted -s "$OUTPUT_IMG" unit b print)
BOOT_OFFSET=$(echo "$PARTED_OUT" | grep -e '^ 1'| xargs echo -n \
| cut -d" " -f 2 | tr -d B)
BOOT_LENGTH=$(echo "$PARTED_OUT" | grep -e '^ 1'| xargs echo -n \
| cut -d" " -f 4 | tr -d B)

ROOT_OFFSET=$(echo "$PARTED_OUT" | grep -e '^ 2'| xargs echo -n \
| cut -d" " -f 2 | tr -d B)
ROOT_LENGTH=$(echo "$PARTED_OUT" | grep -e '^ 2'| xargs echo -n \
| cut -d" " -f 4 | tr -d B)

BOOT_DEV=$(losetup --show -f -o "${BOOT_OFFSET}" --sizelimit "${BOOT_LENGTH}" "$OUTPUT_IMG")
ROOT_DEV=$(losetup --show -f -o "${ROOT_OFFSET}" --sizelimit "${ROOT_LENGTH}" "$OUTPUT_IMG")

IMGID="$(dd if="$OUTPUT_IMG" skip=440 bs=1 count=4 2>/dev/null | xxd -e | cut -f 2 -d' ')"

BOOT_PARTUUID="${IMGID}-01"
ROOT_PARTUUID="${IMGID}-02"

#ROOT_FEATURES="^huge_file"
#for FEATURE in metadata_csum 64bit; do
#	if grep -q "$FEATURE" /etc/mke2fs.conf; then
#	    ROOT_FEATURES="^$FEATURE,$ROOT_FEATURES"
#	fi
#done

do_format

tar xf $DISTRO-$DESKTOP-$ARCH-$BRANCH-$DEVICE.tar -C mnt || true > /dev/null

BOOT_DEV=${BOOT_DEV} ROOT_PARTUUID=${ROOT_PARTUUID} ../bootloader/install_bootloader_$DEVICE.sh

rm -rf mnt/Dockerfile* mnt/.docker* mnt/usr/bin/qemu* mnt/scripts mnt/configs

sync

umounts

zip $DISTRO-$DESKTOP-$ARCH-$BRANCH-$DEVICE.zip $DISTRO-$DESKTOP-$ARCH-$BRANCH-$DEVICE.img

rm -f $DISTRO-$DESKTOP-$ARCH-$BRANCH-$DEVICE.tar $DISTRO-$DESKTOP-$ARCH-$BRANCH-$DEVICE.img

cat >&2 <<-EOF
	---
	The img was placed in target/$DISTRO-$DESKTOP-$ARCH-$BRANCH-$DEVICE.zip
	Flash to storage with Etcher or dd
	
EOF

