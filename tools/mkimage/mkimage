#!/bin/sh

set -xe

cd target

OUTPUT_IMG=$DISTRO-$DESKTOP-$ARCH-$BRANCH-$DEVICE.img

if [ -f "$OUTPUT_IMG" ]; then rm -f "$OUTPUT_IMG" ; fi

case "$ARCH" in
	arm* | aarch64 ) BOOT_SIZE=204800;;
	* )BOOT_SIZE=1024000;;
esac

#case "$DISTRO" in
#	archlinux | debian | ubuntu) PADDING_SIZE=1024000;;
#	*) PADDING_SIZE=0;;
#esac

IMG_SIZE=$(( (`du $DISTRO-$DESKTOP-$ARCH-$BRANCH-$DEVICE.tar | awk '{print $1}'` + ${BOOT_SIZE} + 409600) * 1024 ))

# mkimage
guestfish -N "$OUTPUT_IMG"=disk:${IMG_SIZE} -- \
	part-init /dev/sda mbr : \
	part-add /dev/sda p 8192 ${BOOT_SIZE} : \
	part-add /dev/sda p $((${BOOT_SIZE}+2048)) -1 : \
	part-set-mbr-id /dev/sda 1 0xc : \
	part-set-bootable /dev/sda 1 true : \
	mkfs ext4 /dev/sda2 label:rootfs : \
	mkfs vfat /dev/sda1 label:boot
	
BOOT_UUID=$(guestfish -a "$OUTPUT_IMG" -- run : vfs-uuid /dev/sda1)

IMGID="$(dd if="$OUTPUT_IMG" skip=440 bs=1 count=4 2>/dev/null | xxd -e | cut -f 2 -d' ')"

BOOT_PARTUUID="${IMGID}-01"
ROOT_PARTUUID="${IMGID}-02"
	
# extract

guestfish -a "$OUTPUT_IMG" -- \
	run : \
	mount /dev/sda2 / : \
	mkdir /boot : \
	mount /dev/sda1 /boot : \
	-tar-in $DISTRO-$DESKTOP-$ARCH-$BRANCH-$DEVICE.tar / : \
	glob rm-rf "/Dockerfile*" : \
	glob rm-rf "/.docker*" : \
	glob rm-rf "/usr/bin/qemu*" : \
	rm-rf /scripts : \
	rm-rf /configs
	
BOOT_UUID=${BOOT_UUID} OUTPUT_IMG=${OUTPUT_IMG} ROOT_PARTUUID=${ROOT_PARTUUID} ../bootloader/install_bootloader_$DEVICE.sh

zip $DISTRO-$DESKTOP-$ARCH-$BRANCH-$DEVICE.zip $DISTRO-$DESKTOP-$ARCH-$BRANCH-$DEVICE.img

rm -f $DISTRO-$DESKTOP-$ARCH-$BRANCH-$DEVICE.tar $DISTRO-$DESKTOP-$ARCH-$BRANCH-$DEVICE.img

cat >&2 <<-EOF
	---
	The img was placed in target/$DISTRO-$DESKTOP-$ARCH-$BRANCH-$DEVICE.zip
	Flash to storage with Etcher or dd
	
EOF

